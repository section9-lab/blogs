import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{r as t,o as e,c as p,b as o,d as n,e as c,f as i}from"./app-9b0d4dcb.js";const l={},u=n("h1",{id:"data-structures-overview",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#data-structures-overview","aria-hidden":"true"},"#"),c(" Data Structures Overview")],-1),r=i(`<h2 id="线性结构" tabindex="-1"><a class="header-anchor" href="#线性结构" aria-hidden="true">#</a> 线性结构</h2><h3 id="线性表" tabindex="-1"><a class="header-anchor" href="#线性表" aria-hidden="true">#</a> 线性表</h3><p>数组</p><figure><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/272164f0-a1d6-4c86-a01c-8fd0b0a89d5c/Untitled.png" alt="Untitled" tabindex="0" loading="lazy"><figcaption>Untitled</figcaption></figure><p>链表</p><figure><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/5b7a2597-d459-4fe5-a7b2-0a1dd5678e9d/Untitled.png" alt="Untitled" tabindex="0" loading="lazy"><figcaption>Untitled</figcaption></figure><h3 id="hash表" tabindex="-1"><a class="header-anchor" href="#hash表" aria-hidden="true">#</a> Hash表</h3><figure><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/5c152953-dd52-49ec-8401-bd755ae9e5e4/Untitled.png" alt="Untitled" tabindex="0" loading="lazy"><figcaption>Untitled</figcaption></figure><figure><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/41478b2e-eeca-47df-bd38-bd9053bcf771/Untitled.png" alt="Untitled" tabindex="0" loading="lazy"><figcaption>Untitled</figcaption></figure><h3 id="栈" tabindex="-1"><a class="header-anchor" href="#栈" aria-hidden="true">#</a> 栈</h3><figure><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/9b573b4f-eb04-4385-9d6f-d9030659878c/f1uyb7t5l4.gif" alt="f1uyb7t5l4.gif" tabindex="0" loading="lazy"><figcaption>f1uyb7t5l4.gif</figcaption></figure><h3 id="队列" tabindex="-1"><a class="header-anchor" href="#队列" aria-hidden="true">#</a> 队列</h3><figure><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/e198ebad-7492-4a86-8242-9f93171f97d8/uj2ybsqwq7.gif" alt="uj2ybsqwq7.gif" tabindex="0" loading="lazy"><figcaption>uj2ybsqwq7.gif</figcaption></figure><h2 id="逻辑结构" tabindex="-1"><a class="header-anchor" href="#逻辑结构" aria-hidden="true">#</a> 逻辑结构</h2><h3 id="树" tabindex="-1"><a class="header-anchor" href="#树" aria-hidden="true">#</a> 树</h3><figure><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/656ee0b7-2f9b-4612-9152-0171e2b1835b/Untitled.png" alt="Untitled" tabindex="0" loading="lazy"><figcaption>Untitled</figcaption></figure><figure><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/6677dddf-75de-4a33-b05c-10ac1b2b7a9a/Untitled.png" alt="Untitled" tabindex="0" loading="lazy"><figcaption>Untitled</figcaption></figure><figure><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/17b07941-b5bb-475d-827a-050ad7db31b0/Untitled.png" alt="Untitled" tabindex="0" loading="lazy"><figcaption>Untitled</figcaption></figure><figure><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/272f992b-55f9-4c99-bffe-b078a326a152/Untitled.png" alt="Untitled" tabindex="0" loading="lazy"><figcaption>Untitled</figcaption></figure><figure><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/46de73c4-9bb2-4f8e-a4ae-d3797000e620/Untitled.png" alt="Untitled" tabindex="0" loading="lazy"><figcaption>Untitled</figcaption></figure><figure><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/76540342-e3e4-4ce5-8b7b-24cc65ab47d7/bwwf75vdyg.gif" alt="bwwf75vdyg.gif" tabindex="0" loading="lazy"><figcaption>bwwf75vdyg.gif</figcaption></figure><figure><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/af074197-4d5d-415d-b152-ad4d5b0e4ab3/Untitled.png" alt="Untitled" tabindex="0" loading="lazy"><figcaption>Untitled</figcaption></figure><figure><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/df60cdcd-9a1d-4c31-a371-ebb19b1e9177/25stotndte.gif" alt="25stotndte.gif" tabindex="0" loading="lazy"><figcaption>25stotndte.gif</figcaption></figure><figure><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/b4623e8b-10b1-4cb9-b040-9a1c97681d83/Untitled.png" alt="Untitled" tabindex="0" loading="lazy"><figcaption>Untitled</figcaption></figure><h3 id="堆" tabindex="-1"><a class="header-anchor" href="#堆" aria-hidden="true">#</a> 堆</h3><figure><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/1d29facd-d5fb-415c-b112-5ae89ecf0bd0/Untitled.png" alt="Untitled" tabindex="0" loading="lazy"><figcaption>Untitled</figcaption></figure><h3 id="图" tabindex="-1"><a class="header-anchor" href="#图" aria-hidden="true">#</a> 图</h3><figure><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/f4a42831-d48c-4159-af87-ddc3df1c6f48/Untitled.png" alt="Untitled" tabindex="0" loading="lazy"><figcaption>Untitled</figcaption></figure><figure><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/409a916c-d4f0-43ce-bf46-9434b28c2081/Untitled.png" alt="Untitled" tabindex="0" loading="lazy"><figcaption>Untitled</figcaption></figure><figure><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/67c9c6ed-c391-4cc0-a9cb-6b6ee001bd61/Untitled.png" alt="Untitled" tabindex="0" loading="lazy"><figcaption>Untitled</figcaption></figure><figure><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/4918e506-61f8-4cbf-9991-cefe3752322f/Untitled.png" alt="Untitled" tabindex="0" loading="lazy"><figcaption>Untitled</figcaption></figure><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>data<span class="token punctuation">.</span>structurs<span class="token punctuation">.</span>graph</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Vector</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Graph</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">int</span> n<span class="token punctuation">;</span>  <span class="token comment">// 节点数</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> m<span class="token punctuation">;</span>  <span class="token comment">// 边数</span>
    <span class="token keyword">private</span> <span class="token keyword">boolean</span> directed<span class="token punctuation">;</span>    <span class="token comment">// 是否为有向图</span>
    <span class="token keyword">private</span> <span class="token class-name">Vector</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> adjacency<span class="token punctuation">;</span> <span class="token comment">// 图的具体数据</span>

    <span class="token comment">// 构造函数</span>
    <span class="token keyword">public</span> <span class="token class-name">Graph</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">boolean</span> directed<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">assert</span> n <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>n <span class="token operator">=</span> n<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>m <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">// 初始化没有任何边</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>directed <span class="token operator">=</span> directed<span class="token punctuation">;</span>
        <span class="token comment">// g初始化为n个空的vector, 表示每一个g[i]都为空, 即没有任和边</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>adjacency <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Vector</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">Vector</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>adjacency<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vector</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token class-name">V</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> n<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token comment">// 返回节点个数</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token class-name">E</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> m<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token comment">// 返回边的个数</span>

    <span class="token comment">// 向图中添加一个边</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addEdge</span><span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token punctuation">,</span> <span class="token keyword">int</span> w<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">assert</span> v <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> v <span class="token operator">&lt;</span> n<span class="token punctuation">;</span>
        <span class="token keyword">assert</span> w <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> w <span class="token operator">&lt;</span> n<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>adjacency<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>v <span class="token operator">!=</span> w <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>directed<span class="token punctuation">)</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>adjacency<span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
        m<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 验证图中是否有从v到w的边</span>
    <span class="token keyword">boolean</span> <span class="token function">hasEdge</span><span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token punctuation">,</span> <span class="token keyword">int</span> w<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">assert</span> v <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> v <span class="token operator">&lt;</span> n<span class="token punctuation">;</span>
        <span class="token keyword">assert</span> w <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> w <span class="token operator">&lt;</span> n<span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>adjacency<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>adjacency<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">elementAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> w<span class="token punctuation">)</span>
                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 返回图中一个顶点的所有邻边</span>
    <span class="token comment">// 由于java使用引用机制，返回一个Vector不会带来额外开销,</span>
    <span class="token keyword">public</span> <span class="token class-name">Iterable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token function">adj</span><span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">assert</span> v <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> v <span class="token operator">&lt;</span> n<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>adjacency<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;Graph{&quot;</span> <span class="token operator">+</span>
                <span class="token string">&quot;n=&quot;</span> <span class="token operator">+</span> n <span class="token operator">+</span>
                <span class="token string">&quot;, m=&quot;</span> <span class="token operator">+</span> m <span class="token operator">+</span>
                <span class="token string">&quot;, directed=&quot;</span> <span class="token operator">+</span> directed <span class="token operator">+</span>
                <span class="token string">&quot;, adjacency=&quot;</span> <span class="token operator">+</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>adjacency<span class="token punctuation">)</span> <span class="token operator">+</span>
                <span class="token char">&#39;}&#39;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//初始化一个有5个节点的图</span>
        <span class="token class-name">Graph</span> graph <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Graph</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>graph<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//添加节点之间的关系</span>
        graph<span class="token punctuation">.</span><span class="token function">addEdge</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        graph<span class="token punctuation">.</span><span class="token function">addEdge</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        graph<span class="token punctuation">.</span><span class="token function">addEdge</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        graph<span class="token punctuation">.</span><span class="token function">addEdge</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        graph<span class="token punctuation">.</span><span class="token function">addEdge</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>graph<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,32);function d(k,m){const s=t("Mermaid");return e(),p("div",null,[u,o(s,{id:"mermaid-3",code:"eJxLL0osyFDwCbLmejZ1w7Pedc93T342r0VX1+75rv3PGpZDuOhyLxt2v9g3ESrHhawSrvHFwhVQCSALKAo04fnuFseiosRKFPGXk/cBGT6ZedmpKT6ZxSXopnkkFmcgzIILP1vQEVySmJyNLv5yxvynHdMDS1NLU7m4kJ0J1jMxpCg1FV346YI2j9TEAgzh2fvcQWHDxQUAElakuA=="}),r])}const g=a(l,[["render",d],["__file","DataStructures.html.vue"]]);export{g as default};
