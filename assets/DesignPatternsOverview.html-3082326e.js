import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{o as r,c as e,f as a}from"./app-dd70a414.js";const n={},i=a('<h1 id="design-patterns-overview" tabindex="-1"><a class="header-anchor" href="#design-patterns-overview" aria-hidden="true">#</a> Design Patterns Overview</h1><p>| 创建型模式 | • 单例模式（Singleton Pattern）<br> • 工厂模式（Factory Pattern）<br> • 抽象工厂模式（Abstract Factory Pattern）<br> • 建造者模式（Builder Pattern）<br> • 原型模式（Prototype Pattern） |<br> | --- | --- |<br> | 结构型模式 | • 适配器模式（Adapter Pattern）<br> • 桥接模式（Bridge Pattern）<br> • 过滤器模式（Filter、Criteria Pattern）<br> • 组合模式（Composite Pattern）<br> • 装饰器模式（Decorator Pattern）<br> • 外观模式（Facade Pattern）<br> • 享元模式（Flyweight Pattern）<br> • 代理模式（Proxy Pattern） |<br> | 行为型模式 | • 责任链模式（Chain of Responsibility Pattern）<br> • 命令模式（Command Pattern）<br> • 解释器模式（Interpreter Pattern）<br> • 迭代器模式（Iterator Pattern）<br> • 中介者模式（Mediator Pattern）<br> • 备忘录模式（Memento Pattern）<br> • 观察者模式（Observer Pattern）<br> • 状态模式（State Pattern）<br> • 空对象模式（Null Object Pattern）<br> • 策略模式（Strategy Pattern）<br> • 模板模式（Template Pattern）<br> • 访问者模式（Visitor Pattern） |</p><p>设计模式为了提高软件的可维护性，通用型和扩展性，并降低复杂度。</p>',3),o=[i];function s(b,P){return r(),e("div",null,o)}const l=t(n,[["render",s],["__file","DesignPatternsOverview.html.vue"]]);export{l as default};
