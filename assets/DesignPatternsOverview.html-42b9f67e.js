const t=JSON.parse('{"key":"v-57b8c987","path":"/design/DesignPatternsOverview.html","title":"Design Patterns Overview","lang":"zh-CN","frontmatter":{"icon":"fab fa-markdown","date":"2023-11-22T00:00:00.000Z","category":["DesignPattern"],"tag":["java"],"star":true,"sticky":true,"description":"Design Patterns Overview | 创建型模式 | • 单例模式（Singleton Pattern） • 工厂模式（Factory Pattern） • 抽象工厂模式（Abstract Factory Pattern） • 建造者模式（Builder Pattern） • 原型模式（Prototype Pattern） | | --- | --- | | 结构型模式 | • 适配器模式（Adapter Pattern） • 桥接模式（Bridge Pattern） • 过滤器模式（Filter、Criteria Pattern） • 组合模式（Composite Pattern） • 装饰器模式（Decorator Pattern） • 外观模式（Facade Pattern） • 享元模式（Flyweight Pattern） • 代理模式（Proxy Pattern） | | 行为型模式 | • 责任链模式（Chain of Responsibility Pattern） • 命令模式（Command Pattern） • 解释器模式（Interpreter Pattern） • 迭代器模式（Iterator Pattern） • 中介者模式（Mediator Pattern） • 备忘录模式（Memento Pattern） • 观察者模式（Observer Pattern） • 状态模式（State Pattern） • 空对象模式（Null Object Pattern） • 策略模式（Strategy Pattern） • 模板模式（Template Pattern） • 访问者模式（Visitor Pattern） |","head":[["meta",{"property":"og:url","content":"https://section9-lab.github.io/blogs/blogs/design/DesignPatternsOverview.html"}],["meta",{"property":"og:site_name","content":"博客演示"}],["meta",{"property":"og:title","content":"Design Patterns Overview"}],["meta",{"property":"og:description","content":"Design Patterns Overview | 创建型模式 | • 单例模式（Singleton Pattern） • 工厂模式（Factory Pattern） • 抽象工厂模式（Abstract Factory Pattern） • 建造者模式（Builder Pattern） • 原型模式（Prototype Pattern） | | --- | --- | | 结构型模式 | • 适配器模式（Adapter Pattern） • 桥接模式（Bridge Pattern） • 过滤器模式（Filter、Criteria Pattern） • 组合模式（Composite Pattern） • 装饰器模式（Decorator Pattern） • 外观模式（Facade Pattern） • 享元模式（Flyweight Pattern） • 代理模式（Proxy Pattern） | | 行为型模式 | • 责任链模式（Chain of Responsibility Pattern） • 命令模式（Command Pattern） • 解释器模式（Interpreter Pattern） • 迭代器模式（Iterator Pattern） • 中介者模式（Mediator Pattern） • 备忘录模式（Memento Pattern） • 观察者模式（Observer Pattern） • 状态模式（State Pattern） • 空对象模式（Null Object Pattern） • 策略模式（Strategy Pattern） • 模板模式（Template Pattern） • 访问者模式（Visitor Pattern） |"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-11-22T06:21:05.000Z"}],["meta",{"property":"article:author","content":"Section9lab"}],["meta",{"property":"article:tag","content":"java"}],["meta",{"property":"article:published_time","content":"2023-11-22T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-11-22T06:21:05.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Design Patterns Overview\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-11-22T00:00:00.000Z\\",\\"dateModified\\":\\"2023-11-22T06:21:05.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Section9lab\\",\\"url\\":\\"https://github.com/section9lab/\\"}]}"]]},"headers":[],"git":{"createdTime":1700634065000,"updatedTime":1700634065000,"contributors":[{"name":"Tachikoma","email":"section9lab@gmail.com","commits":1}]},"readingTime":{"minutes":0.77,"words":231},"filePathRelative":"design/DesignPatternsOverview.md","localizedDate":"2023年11月22日","excerpt":"<h1> Design Patterns Overview</h1>\\n<p>| 创建型模式 | • 单例模式（Singleton Pattern）<br>\\n• 工厂模式（Factory Pattern）<br>\\n• 抽象工厂模式（Abstract Factory Pattern）<br>\\n• 建造者模式（Builder Pattern）<br>\\n• 原型模式（Prototype Pattern） |<br>\\n| --- | --- |<br>\\n| 结构型模式 | • 适配器模式（Adapter Pattern）<br>\\n• 桥接模式（Bridge Pattern）<br>\\n• 过滤器模式（Filter、Criteria Pattern）<br>\\n• 组合模式（Composite Pattern）<br>\\n• 装饰器模式（Decorator Pattern）<br>\\n• 外观模式（Facade Pattern）<br>\\n• 享元模式（Flyweight Pattern）<br>\\n• 代理模式（Proxy Pattern） |<br>\\n| 行为型模式 | • 责任链模式（Chain of Responsibility Pattern）<br>\\n• 命令模式（Command Pattern）<br>\\n• 解释器模式（Interpreter Pattern）<br>\\n• 迭代器模式（Iterator Pattern）<br>\\n• 中介者模式（Mediator Pattern）<br>\\n• 备忘录模式（Memento Pattern）<br>\\n• 观察者模式（Observer Pattern）<br>\\n• 状态模式（State Pattern）<br>\\n• 空对象模式（Null Object Pattern）<br>\\n• 策略模式（Strategy Pattern）<br>\\n• 模板模式（Template Pattern）<br>\\n• 访问者模式（Visitor Pattern） |</p>","autoDesc":true}');export{t as data};
