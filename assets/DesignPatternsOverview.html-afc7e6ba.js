const t=JSON.parse('{"key":"v-7170ea83","path":"/posts/design/DesignPatternsOverview.html","title":"Design Patterns Overview","lang":"zh-CN","frontmatter":{"icon":"fab fa-markdown","date":"2023-11-22T00:00:00.000Z","category":["DesignPattern"],"tag":["java"],"star":true,"sticky":true,"description":"Design Patterns Overview 分类 模式 创建型模式 • 单例模式（Singleton Pattern）• 工厂模式（Factory Pattern）• 抽象工厂模式（Abstract Factory Pattern）• 建造者模式（Builder Pattern）• 原型模式（Prototype Pattern） 结构型模式 • 适配器模式（Adapter Pattern）• 桥接模式（Bridge Pattern）• 过滤器模式（Filter、Criteria Pattern）• 组合模式（Composite Pattern）• 装饰器模式（DecoratorPattern）• 外观模式（Facade Pattern）• 享元模式（Flyweight Pattern）• 代理模式（Proxy Pattern） 行为型模式 • 责任链模式（Chain of Responsibility Pattern）• 命令模式（Command Pattern）•解释器模式（Interpreter Pattern）• 迭代器模式（Iterator Pattern）• 中介者模式（MediatorPattern）• 备忘录模式（Memento Pattern）• 观察者模式（Observer Pattern）• 状态模式（State Pattern）• 空对象模式（Null Object Pattern）• 策略模式（Strategy Pattern）• 模板模式（Template Pattern）• 访问者模式（Visitor Pattern）","head":[["meta",{"property":"og:url","content":"https://section9-lab.github.io/blogs/blogs/posts/design/DesignPatternsOverview.html"}],["meta",{"property":"og:site_name","content":"博客站点"}],["meta",{"property":"og:title","content":"Design Patterns Overview"}],["meta",{"property":"og:description","content":"Design Patterns Overview 分类 模式 创建型模式 • 单例模式（Singleton Pattern）• 工厂模式（Factory Pattern）• 抽象工厂模式（Abstract Factory Pattern）• 建造者模式（Builder Pattern）• 原型模式（Prototype Pattern） 结构型模式 • 适配器模式（Adapter Pattern）• 桥接模式（Bridge Pattern）• 过滤器模式（Filter、Criteria Pattern）• 组合模式（Composite Pattern）• 装饰器模式（DecoratorPattern）• 外观模式（Facade Pattern）• 享元模式（Flyweight Pattern）• 代理模式（Proxy Pattern） 行为型模式 • 责任链模式（Chain of Responsibility Pattern）• 命令模式（Command Pattern）•解释器模式（Interpreter Pattern）• 迭代器模式（Iterator Pattern）• 中介者模式（MediatorPattern）• 备忘录模式（Memento Pattern）• 观察者模式（Observer Pattern）• 状态模式（State Pattern）• 空对象模式（Null Object Pattern）• 策略模式（Strategy Pattern）• 模板模式（Template Pattern）• 访问者模式（Visitor Pattern）"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-22T10:42:27.000Z"}],["meta",{"property":"article:author","content":"Section9lab"}],["meta",{"property":"article:tag","content":"java"}],["meta",{"property":"article:published_time","content":"2023-11-22T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-22T10:42:27.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Design Patterns Overview\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-11-22T00:00:00.000Z\\",\\"dateModified\\":\\"2024-11-22T10:42:27.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Section9lab\\",\\"url\\":\\"https://github.com/section9lab/\\"}]}"]]},"headers":[],"git":{"createdTime":1732272147000,"updatedTime":1732272147000,"contributors":[{"name":"Tachikoma","email":"section9lab@gmail.com","commits":1}]},"readingTime":{"minutes":0.87,"words":261},"filePathRelative":"posts/design/DesignPatternsOverview.md","localizedDate":"2023年11月22日","excerpt":"<h1> Design Patterns Overview</h1>\\n<table>\\n<thead>\\n<tr>\\n<th>分类</th>\\n<th>模式</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>创建型模式</td>\\n<td>• <a href=\\"https://section9-lab.github.io/blogs/design/DesignPatternsSingleton.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">单例模式</a>（Singleton Pattern）<br>• <a href=\\"https://section9-lab.github.io/blogs/design/DesignPatternsFactory.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">工厂模式</a>（Factory Pattern）<br>• 抽象工厂模式（Abstract Factory Pattern）<br>• 建造者模式（Builder Pattern）<br>• 原型模式（Prototype Pattern）</td>\\n</tr>\\n<tr>\\n<td>结构型模式</td>\\n<td>• 适配器模式（Adapter Pattern）<br>• 桥接模式（Bridge Pattern）<br>• 过滤器模式（Filter、Criteria Pattern）<br>• 组合模式（Composite Pattern）<br>• 装饰器模式（DecoratorPattern）<br>• 外观模式（Facade Pattern）<br>• 享元模式（Flyweight Pattern）<br>• 代理模式（Proxy Pattern）</td>\\n</tr>\\n<tr>\\n<td>行为型模式</td>\\n<td>• 责任链模式（Chain of Responsibility Pattern）<br>• 命令模式（Command Pattern）<br>•解释器模式（Interpreter Pattern）<br>• 迭代器模式（Iterator Pattern）<br>• 中介者模式（MediatorPattern）<br>• 备忘录模式（Memento Pattern）<br>• 观察者模式（Observer Pattern）<br>• 状态模式（State Pattern）<br>• 空对象模式（Null Object Pattern）<br>• 策略模式（Strategy Pattern）<br>• 模板模式（Template Pattern）<br>• 访问者模式（Visitor Pattern）</td>\\n</tr>\\n</tbody>\\n</table>","autoDesc":true}');export{t as data};
