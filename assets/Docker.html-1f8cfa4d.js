const e=JSON.parse('{"key":"v-17de1a10","path":"/posts/tools/Docker.html","title":"Docker","lang":"zh-CN","frontmatter":{"icon":"fab fa-markdown","date":"2022-01-12T00:00:00.000Z","category":["Middleware"],"tag":["tools"],"star":true,"sticky":false,"description":"Docker Docker 1、Docker是什么？ Docker 基于 Linux 内核的 cgroup，namespace，以及 OverlayFS 类的 Union FS 等技术，对进程进行封装隔离，属于 操作系统层面的虚拟化技术。 由于隔离的进程独立于宿主和其它的隔离的进程，因此也称其为容器。 Docker 在容器的基础上，进行了进一步的封装，从文件系统、网络互联到进程隔离等等，极大的简化了容器的创建和维护。 使得 Docker 技术比虚拟机技术更为轻便、快捷。","head":[["meta",{"property":"og:url","content":"https://section9-lab.github.io/blogs/blogs/posts/tools/Docker.html"}],["meta",{"property":"og:site_name","content":"博客站点"}],["meta",{"property":"og:title","content":"Docker"}],["meta",{"property":"og:description","content":"Docker Docker 1、Docker是什么？ Docker 基于 Linux 内核的 cgroup，namespace，以及 OverlayFS 类的 Union FS 等技术，对进程进行封装隔离，属于 操作系统层面的虚拟化技术。 由于隔离的进程独立于宿主和其它的隔离的进程，因此也称其为容器。 Docker 在容器的基础上，进行了进一步的封装，从文件系统、网络互联到进程隔离等等，极大的简化了容器的创建和维护。 使得 Docker 技术比虚拟机技术更为轻便、快捷。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-10T02:59:49.000Z"}],["meta",{"property":"article:author","content":"Section9lab"}],["meta",{"property":"article:tag","content":"tools"}],["meta",{"property":"article:published_time","content":"2022-01-12T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-01-10T02:59:49.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Docker\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-01-12T00:00:00.000Z\\",\\"dateModified\\":\\"2024-01-10T02:59:49.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Section9lab\\",\\"url\\":\\"https://github.com/section9lab/\\"}]}"]]},"headers":[{"level":2,"title":"1、Docker是什么？","slug":"_1、docker是什么","link":"#_1、docker是什么","children":[]},{"level":2,"title":"2、Docker解决了什么问题？","slug":"_2、docker解决了什么问题","link":"#_2、docker解决了什么问题","children":[{"level":3,"title":"2.1、在Docker诞生之前存在什么问题？","slug":"_2-1、在docker诞生之前存在什么问题","link":"#_2-1、在docker诞生之前存在什么问题","children":[]},{"level":3,"title":"2.2、Docker的优点：","slug":"_2-2、docker的优点","link":"#_2-2、docker的优点","children":[]}]},{"level":2,"title":"3、安装docker","slug":"_3、安装docker","link":"#_3、安装docker","children":[]},{"level":2,"title":"4、docker命令","slug":"_4、docker命令","link":"#_4、docker命令","children":[{"level":3,"title":"4.1、image","slug":"_4-1、image","link":"#_4-1、image","children":[]},{"level":3,"title":"4.1、文件","slug":"_4-1、文件","link":"#_4-1、文件","children":[]},{"level":3,"title":"4.2、容器","slug":"_4-2、容器","link":"#_4-2、容器","children":[]}]},{"level":2,"title":"5、Dockerfile","slug":"_5、dockerfile","link":"#_5、dockerfile","children":[{"level":3,"title":"5.1、本地文件","slug":"_5-1、本地文件","link":"#_5-1、本地文件","children":[]},{"level":3,"title":"5.2、git构建","slug":"_5-2、git构建","link":"#_5-2、git构建","children":[]},{"level":3,"title":"5.3、标准输入构建","slug":"_5-3、标准输入构建","link":"#_5-3、标准输入构建","children":[]}]},{"level":2,"title":"6、例子","slug":"_6、例子","link":"#_6、例子","children":[{"level":3,"title":"6.1、启动一个本地hadoop镜像","slug":"_6-1、启动一个本地hadoop镜像","link":"#_6-1、启动一个本地hadoop镜像","children":[]}]},{"level":2,"title":"7、docker 镜像加速","slug":"_7、docker-镜像加速","link":"#_7、docker-镜像加速","children":[]}],"git":{"createdTime":1700808496000,"updatedTime":1704855589000,"contributors":[{"name":"Tachikoma","email":"section9lab@gmail.com","commits":4}]},"readingTime":{"minutes":5.04,"words":1512},"filePathRelative":"posts/tools/Docker.md","localizedDate":"2022年1月12日","excerpt":"<h1> Docker</h1>\\n\\n<hr>\\n<h1> Docker</h1>\\n<h2> 1、Docker是什么？</h2>\\n<p><br>\\nDocker 基于 Linux 内核的 cgroup，namespace，以及 OverlayFS 类的 Union FS 等技术，对进程进行封装隔离，属于 操作系统层面的虚拟化技术。<br>\\n由于隔离的进程独立于宿主和其它的隔离的进程，因此也称其为容器。</p>\\n<p>Docker 在容器的基础上，进行了进一步的封装，从文件系统、网络互联到进程隔离等等，极大的简化了容器的创建和维护。<br>\\n使得 Docker 技术比虚拟机技术更为轻便、快捷。</p>","autoDesc":true}');export{e as data};
