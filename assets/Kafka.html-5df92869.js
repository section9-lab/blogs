import{_ as c}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as l,c as i,d as n,b as a,w as o,e as s,f as u}from"./app-f9e39324.js";const r={},k=n("h1",{id:"kafkaconf",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#kafkaconf","aria-hidden":"true"},"#"),s(" KafkaConf")],-1),d={class:"table-of-contents"},m=u(`<hr><h2 id="config" tabindex="-1"><a class="header-anchor" href="#config" aria-hidden="true">#</a> config</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReliableProducer</span> <span class="token punctuation">{</span>

   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>

      <span class="token comment">// Kafka broker 地址</span>
      <span class="token class-name">String</span> bootstrapServers <span class="token operator">=</span> <span class="token string">&quot;localhost:9092&quot;</span><span class="token punctuation">;</span>

      <span class="token comment">// 设置 Producer 的配置信息</span>
      <span class="token class-name">Properties</span> props <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ProducerConfig</span><span class="token punctuation">.</span><span class="token constant">BOOTSTRAP_SERVERS_CONFIG</span><span class="token punctuation">,</span> bootstrapServers<span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token comment">// 设置消息可靠性配置参数</span>
      <span class="token comment">// 0不会等待任何broker的响应并不能保证消息成功发送 但是这种吞吐量最高</span>
      <span class="token comment">// 1 leader broker自己写入后就响应，不会等待ISR其他的副本写入，只要leader broker存活就不会丢失，即保证了不丢失，也保证了吞吐量。(默认值)</span>
      <span class="token comment">// all或者-1：leader broker会等消息写入 并且ISR都写入后才会响应，这种只要ISR有副本存活就肯定不会丢失，但吞吐量最低。</span>
      props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ProducerConfig</span><span class="token punctuation">.</span><span class="token constant">ACKS_CONFIG</span><span class="token punctuation">,</span> <span class="token string">&quot;all&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ProducerConfig</span><span class="token punctuation">.</span><span class="token constant">RETRIES_CONFIG</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 自动重试 3 次</span>
      props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ProducerConfig</span><span class="token punctuation">.</span><span class="token constant">MAX_IN_FLIGHT_REQUESTS_PER_CONNECTION</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//该参数指定了生产者在收到服务器晌应之前可以发送多少个消息。</span>
      <span class="token comment">// 开启幂等性,由于消息是分batch(批次)发送的，每个batch(批次)都有一个序列号。</span>
      <span class="token comment">//在Broker端，会追踪每个分区的最大序列号。如果出现序列号较小或相等的batch(批次)，broker将不会将该batch(批次)写入topic。</span>
      <span class="token comment">//这样，除了保证了幂等性，还可以确保batch(批次)的顺序。</span>
      props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ProducerConfig</span><span class="token punctuation">.</span><span class="token constant">ENABLE_IDEMPOTENCE_CONFIG</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ProducerConfig</span><span class="token punctuation">.</span><span class="token constant">COMPRESSION_TYPE_CONFIG</span><span class="token punctuation">,</span> <span class="token string">&quot;snappy&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 设置消息序列化：使用 StringSerializer 将键和值序列化为字节数组</span>
      props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ProducerConfig</span><span class="token punctuation">.</span><span class="token constant">KEY_SERIALIZER_CLASS_CONFIG</span><span class="token punctuation">,</span> <span class="token class-name">StringSerializer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ProducerConfig</span><span class="token punctuation">.</span><span class="token constant">VALUE_SERIALIZER_CLASS_CONFIG</span><span class="token punctuation">,</span> <span class="token class-name">StringSerializer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token comment">// 创建一个 KafkaProducer 实例，并指定 key 和 value 的类型为 String</span>
      <span class="token class-name">KafkaProducer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> producer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">KafkaProducer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token comment">// 创建一个消息</span>
      <span class="token class-name">String</span> topic <span class="token operator">=</span> <span class="token string">&quot;test-topic&quot;</span><span class="token punctuation">;</span>
      <span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token string">&quot;key&quot;</span><span class="token punctuation">;</span>
      <span class="token class-name">String</span> value <span class="token operator">=</span> <span class="token string">&quot;value&quot;</span><span class="token punctuation">;</span>

      <span class="token comment">// 发送消息，并阻塞直到发送完成</span>
      producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ProducerRecord</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>topic<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token comment">// 关闭 producer</span>
      producer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="关于消费策略" tabindex="-1"><a class="header-anchor" href="#关于消费策略" aria-hidden="true">#</a> 关于消费策略：</h2><ul><li>最多一次（at most once）: 消息可能丢失也可能被处理，但最多只会被处理一次。可能丢失 不会重复</li><li>至少一次（at least once）: 消息不会丢失，但可能被处理多次。可能重复 不会丢失</li><li>确传递一次（exactly once）: 消息被处理且只会被处理一次。不丢失 不重复 就一次</li></ul><p>1、ProducerConfig.ACKS_CONFIG 设置为0时，实现了at most once。<br> 2、ProducerConfig.ACKS_CONFIG 设置为1时 实现了at least once （有一种情况就是消息成功写入，而这个时候由于网络问题producer没有收到写入成功的响应，producer就会开启重试的操作，直到网络恢复，消息就发送了多次）<br> 3、kafka 0.11.0.0 版本引入了 idempotent producer 机制：enable.idempotent 设置为true。<br> Kafka 0.11.0.0 版本引入了幂等生产者和事务支持。幂等生产者确保同一消息多次发送时只写入一次。<br> 在多分区场景下，事务确保所有消息要么全部成功写入，要么全部回滚，以保持数据完整性。<br> 消费者端可能需要额外处理来确保每条消息只被精确地消费一次，如手动管理偏移量提交。</p><h2 id="关键配置解读" tabindex="-1"><a class="header-anchor" href="#关键配置解读" aria-hidden="true">#</a> 关键配置解读：</h2>`,7),v=n("li",null,"enable.auto.commit：是否开启自动提交Offset 默认 true (偏移量是在使用者的轮询方法执行期间提交的)",-1),b={href:"http://auto.commit.interval.ms",target:"_blank",rel:"noopener noreferrer"},f=n("br",null,null,-1),_=n("code",null,"at-least-once",-1),h=n("h2",{id:"处理速度慢的问题",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#处理速度慢的问题","aria-hidden":"true"},"#"),s(" 处理速度慢的问题")],-1),g={href:"http://max.poll.interval.ms",target:"_blank",rel:"noopener noreferrer"},S=n("br",null,null,-1),C=n("br",null,null,-1),w=n("br",null,null,-1),E=n("br",null,null,-1),I={href:"http://max.poll.interval.ms",target:"_blank",rel:"noopener noreferrer"},P=n("br",null,null,-1),y={href:"https://www.confluent.io/blog/introducing-confluent-parallel-message-processing-client/?utm_source=twitter&utm_medium=organicsocial&utm_campaign=tm.devx_ch.introducing-confluent-parallel-message-processing-client_content.clients",target:"_blank",rel:"noopener noreferrer"},N=n("br",null,null,-1),x={href:"https://www.confluent.io/blog/kafka-consumer-multi-threaded-messaging/",target:"_blank",rel:"noopener noreferrer"},O={href:"https://engineering.linkedin.com/distributed-systems/log-what-every-software-engineer-should-know-about-real-time-datas-unifying",target:"_blank",rel:"noopener noreferrer"};function R(q,K){const e=p("router-link"),t=p("ExternalLinkIcon");return l(),i("div",null,[k,n("nav",d,[n("ul",null,[n("li",null,[a(e,{to:"#config"},{default:o(()=>[s("config")]),_:1})]),n("li",null,[a(e,{to:"#关于消费策略"},{default:o(()=>[s("关于消费策略：")]),_:1})]),n("li",null,[a(e,{to:"#关键配置解读"},{default:o(()=>[s("关键配置解读：")]),_:1})]),n("li",null,[a(e,{to:"#处理速度慢的问题"},{default:o(()=>[s("处理速度慢的问题")]),_:1})])])]),m,n("ol",null,[v,n("li",null,[n("a",b,[s("auto.commit.interval.ms"),a(t)]),s("：自动提交Offset的时间间隔 默认 5000ms(仅定义提交之间的最小延迟)"),f,s(" 仅提交在以前的轮询调用中返回的记录的偏移量。由于处理发生在轮询调用之间，因此永远不会提交未处理记录的偏移量。这保证了"),_,s("至少一次的交付语义。")])]),h,n("p",null,[s("轮询方法调用之间允许的最大延迟由 "),n("a",g,[s("max.poll.interval.ms"),a(t)]),s(" 配置定义，默认为 5 分钟。"),S,s(" 如果使用者未能在该时间间隔内调用轮询方法，则将其视为死，并触发组重新平衡。"),C,s(" 对于每个使用者的线程和每个记录需要很长时间才能处理的用例的默认配置，这种情况经常发生。")]),n("p",null,[s("使用每个使用者线程模型时，可以通过调整以下配置值来解决此问题："),w,s(" 将 max.poll.records 设置为较小的值"),E,s(" 将 "),n("a",I,[s("max.poll.interval.ms"),a(t)]),s(" 设置为更高的值")]),n("p",null,[s("在kafka分区无法改动的情况下使用以下两种方案作为参考"),P,s(" 1、使用"),n("a",y,[s("Confluent Parallel Consumer"),a(t)]),N,s(" 2、单线程消费，分配给多线程处理，处理完成后由主线程提交offset "),n("a",x,[s("多线程消费"),a(t)])]),n("ul",null,[n("li",null,[n("a",O,[s("https://engineering.linkedin.com/distributed-systems/log-what-every-software-engineer-should-know-about-real-time-datas-unifying"),a(t)])])])])}const G=c(r,[["render",R],["__file","Kafka.html.vue"]]);export{G as default};
