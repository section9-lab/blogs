const n=JSON.parse('{"key":"v-7fde510a","path":"/posts/guide/Kafka.html","title":"KafkaConf","lang":"zh-CN","frontmatter":{"icon":"fab fa-markdown","date":"2022-01-12T00:00:00.000Z","category":["Middleware"],"tag":["tools"],"star":true,"sticky":true,"description":"KafkaConf config public class ReliableProducer { public static void main(String[] args) { // Kafka broker 地址 String bootstrapServers = \\"localhost:9092\\"; // 设置 Producer 的配置信息 Properties props = new Properties(); props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers); // 设置消息可靠性配置参数 props.put(ProducerConfig.ACKS_CONFIG, \\"all\\"); // 0不会等待任何broker的响应;1得到leader的确认;all等待所有副本写入确认 props.put(ProducerConfig.RETRIES_CONFIG, 3); // 自动重试 3 次 props.put(ProducerConfig.MAX_IN_FLIGHT_REQUESTS_PER_CONNECTION, 1);//该参数指定了生产者在收到服务器晌应之前可以发送多少个消息。 // 开启幂等性,由于消息是分batch(批次)发送的，每个batch(批次)都有一个序列号。 //在Broker端，会追踪每个分区的最大序列号。如果出现序列号较小或相等的batch(批次)，broker将不会将该batch(批次)写入topic。 //这样，除了保证了幂等性，还可以确保batch(批次)的顺序。 props.put(ProducerConfig.ENABLE_IDEMPOTENCE_CONFIG, true); props.put(ProducerConfig.COMPRESSION_TYPE_CONFIG, \\"snappy\\"); // 设置消息序列化：使用 StringSerializer 将键和值序列化为字节数组 props.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName()); props.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName()); // 创建一个 KafkaProducer 实例，并指定 key 和 value 的类型为 String KafkaProducer&lt;String, String&gt; producer = new KafkaProducer&lt;&gt;(props); // 创建一个消息 String topic = \\"test-topic\\"; String key = \\"key\\"; String value = \\"value\\"; // 发送消息，并阻塞直到发送完成 producer.send(new ProducerRecord&lt;&gt;(topic, key, value)).get(); // 关闭 producer producer.close(); } }","head":[["meta",{"property":"og:url","content":"https://section9-lab.github.io/blogs/blogs/posts/guide/Kafka.html"}],["meta",{"property":"og:site_name","content":"博客演示"}],["meta",{"property":"og:title","content":"KafkaConf"}],["meta",{"property":"og:description","content":"KafkaConf config public class ReliableProducer { public static void main(String[] args) { // Kafka broker 地址 String bootstrapServers = \\"localhost:9092\\"; // 设置 Producer 的配置信息 Properties props = new Properties(); props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers); // 设置消息可靠性配置参数 props.put(ProducerConfig.ACKS_CONFIG, \\"all\\"); // 0不会等待任何broker的响应;1得到leader的确认;all等待所有副本写入确认 props.put(ProducerConfig.RETRIES_CONFIG, 3); // 自动重试 3 次 props.put(ProducerConfig.MAX_IN_FLIGHT_REQUESTS_PER_CONNECTION, 1);//该参数指定了生产者在收到服务器晌应之前可以发送多少个消息。 // 开启幂等性,由于消息是分batch(批次)发送的，每个batch(批次)都有一个序列号。 //在Broker端，会追踪每个分区的最大序列号。如果出现序列号较小或相等的batch(批次)，broker将不会将该batch(批次)写入topic。 //这样，除了保证了幂等性，还可以确保batch(批次)的顺序。 props.put(ProducerConfig.ENABLE_IDEMPOTENCE_CONFIG, true); props.put(ProducerConfig.COMPRESSION_TYPE_CONFIG, \\"snappy\\"); // 设置消息序列化：使用 StringSerializer 将键和值序列化为字节数组 props.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName()); props.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName()); // 创建一个 KafkaProducer 实例，并指定 key 和 value 的类型为 String KafkaProducer&lt;String, String&gt; producer = new KafkaProducer&lt;&gt;(props); // 创建一个消息 String topic = \\"test-topic\\"; String key = \\"key\\"; String value = \\"value\\"; // 发送消息，并阻塞直到发送完成 producer.send(new ProducerRecord&lt;&gt;(topic, key, value)).get(); // 关闭 producer producer.close(); } }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-08-30T02:05:52.000Z"}],["meta",{"property":"article:author","content":"Section9lab"}],["meta",{"property":"article:tag","content":"tools"}],["meta",{"property":"article:published_time","content":"2022-01-12T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-08-30T02:05:52.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"KafkaConf\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-01-12T00:00:00.000Z\\",\\"dateModified\\":\\"2023-08-30T02:05:52.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Section9lab\\",\\"url\\":\\"https://github.com/section9lab/\\"}]}"]]},"headers":[{"level":2,"title":"config","slug":"config","link":"#config","children":[]}],"git":{"createdTime":1693361152000,"updatedTime":1693361152000,"contributors":[{"name":"Tachikoma","email":"section9lab@gmail.com","commits":1}]},"readingTime":{"minutes":1.19,"words":356},"filePathRelative":"posts/guide/Kafka.md","localizedDate":"2022年1月12日","excerpt":"<h1> KafkaConf</h1>\\n\\n<hr>\\n<h2> config</h2>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">ReliableProducer</span> <span class=\\"token punctuation\\">{</span>\\n\\n   <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">static</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> args<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n\\n      <span class=\\"token comment\\">// Kafka broker 地址</span>\\n      <span class=\\"token class-name\\">String</span> bootstrapServers <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"localhost:9092\\"</span><span class=\\"token punctuation\\">;</span>\\n\\n      <span class=\\"token comment\\">// 设置 Producer 的配置信息</span>\\n      <span class=\\"token class-name\\">Properties</span> props <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Properties</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n      props<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">put</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">ProducerConfig</span><span class=\\"token punctuation\\">.</span><span class=\\"token constant\\">BOOTSTRAP_SERVERS_CONFIG</span><span class=\\"token punctuation\\">,</span> bootstrapServers<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n      <span class=\\"token comment\\">// 设置消息可靠性配置参数</span>\\n      props<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">put</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">ProducerConfig</span><span class=\\"token punctuation\\">.</span><span class=\\"token constant\\">ACKS_CONFIG</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"all\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 0不会等待任何broker的响应;1得到leader的确认;all等待所有副本写入确认</span>\\n      props<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">put</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">ProducerConfig</span><span class=\\"token punctuation\\">.</span><span class=\\"token constant\\">RETRIES_CONFIG</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">3</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 自动重试 3 次</span>\\n      props<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">put</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">ProducerConfig</span><span class=\\"token punctuation\\">.</span><span class=\\"token constant\\">MAX_IN_FLIGHT_REQUESTS_PER_CONNECTION</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//该参数指定了生产者在收到服务器晌应之前可以发送多少个消息。</span>\\n      <span class=\\"token comment\\">// 开启幂等性,由于消息是分batch(批次)发送的，每个batch(批次)都有一个序列号。</span>\\n      <span class=\\"token comment\\">//在Broker端，会追踪每个分区的最大序列号。如果出现序列号较小或相等的batch(批次)，broker将不会将该batch(批次)写入topic。</span>\\n      <span class=\\"token comment\\">//这样，除了保证了幂等性，还可以确保batch(批次)的顺序。</span>\\n      props<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">put</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">ProducerConfig</span><span class=\\"token punctuation\\">.</span><span class=\\"token constant\\">ENABLE_IDEMPOTENCE_CONFIG</span><span class=\\"token punctuation\\">,</span> <span class=\\"token boolean\\">true</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n      props<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">put</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">ProducerConfig</span><span class=\\"token punctuation\\">.</span><span class=\\"token constant\\">COMPRESSION_TYPE_CONFIG</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"snappy\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n      <span class=\\"token comment\\">// 设置消息序列化：使用 StringSerializer 将键和值序列化为字节数组</span>\\n      props<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">put</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">ProducerConfig</span><span class=\\"token punctuation\\">.</span><span class=\\"token constant\\">KEY_SERIALIZER_CLASS_CONFIG</span><span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">StringSerializer</span><span class=\\"token punctuation\\">.</span><span class=\\"token keyword\\">class</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getName</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n      props<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">put</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">ProducerConfig</span><span class=\\"token punctuation\\">.</span><span class=\\"token constant\\">VALUE_SERIALIZER_CLASS_CONFIG</span><span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">StringSerializer</span><span class=\\"token punctuation\\">.</span><span class=\\"token keyword\\">class</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getName</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n      <span class=\\"token comment\\">// 创建一个 KafkaProducer 实例，并指定 key 和 value 的类型为 String</span>\\n      <span class=\\"token class-name\\">KafkaProducer</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">&gt;</span></span> producer <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">KafkaProducer</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token punctuation\\">(</span>props<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n      <span class=\\"token comment\\">// 创建一个消息</span>\\n      <span class=\\"token class-name\\">String</span> topic <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"test-topic\\"</span><span class=\\"token punctuation\\">;</span>\\n      <span class=\\"token class-name\\">String</span> key <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"key\\"</span><span class=\\"token punctuation\\">;</span>\\n      <span class=\\"token class-name\\">String</span> value <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"value\\"</span><span class=\\"token punctuation\\">;</span>\\n\\n      <span class=\\"token comment\\">// 发送消息，并阻塞直到发送完成</span>\\n      producer<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">send</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">ProducerRecord</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token punctuation\\">(</span>topic<span class=\\"token punctuation\\">,</span> key<span class=\\"token punctuation\\">,</span> value<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">get</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n      <span class=\\"token comment\\">// 关闭 producer</span>\\n      producer<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">close</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n   <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
